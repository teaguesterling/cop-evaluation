IMPORTANT INSTRUCTIONS:
1. Provide a direct, efficient response focused on the most essential information.
2. Prioritize answering all parts of the question concisely over exhaustive detail.
3. Do not ask for clarification or additional information.
4. For complex code tasks, focus on key patterns and principles rather than implementing every detail.
5. If the task seems too large, provide a high-level approach and the most critical implementation elements.
6. Limit explanations to core concepts - aim to complete your response within 60 seconds.
7. When code is requested, provide simplified implementations that demonstrate the approach.
8. For analytical tasks, focus on the most important insights rather than exhaustive analysis.

The following code works but needs refactoring to improve maintainability, readability, and adherence to best practices. Please:

1. Identify the design issues, code smells, and architectural problems
2. Explain how these issues impact maintainability and extensibility
3. Provide a refactored version that addresses these issues
4. Explain the principles and patterns you applied in your refactoring
5. Highlight how your changes improve the code while maintaining functionality

Focus on structural improvements rather than minor stylistic changes. The refactored code should maintain all existing functionality while being more maintainable and extensible.
