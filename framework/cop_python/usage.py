"""
CONCEPT-ORIENTED PROGRAMMING (COP) USAGE GUIDE

This module provides guidance and examples for developers
on effectively using COP annotations in their code.

GUIDING PRINCIPLES:
1. Be explicit about implementation status
2. Mark security-critical components clearly
3. Create clear boundaries for human/AI collaboration
4. Use the minimum annotations needed for clarity
5. Validate annotations against actual implementation

For AI agents: import min.py instead of this module.
"""

# Import needed decorators and constants
from .core import (
    intent,
    invariant,
    implementation_status,
    human_decision,
    security_risk,
    critical_invariant,
    IMPLEMENTED,
    PARTIAL, 
    PLANNED, 
    NOT_IMPLEMENTED,
    AUTOMATION_READY,
    REQUIRES_JUDGMENT,
    DEPRECATED
)

# Example patterns

def example_function_annotations():
    """
    Function-level annotation examples:
    
    @intent("Process customer payment securely")
    @implementation_status(PARTIAL, details="Only credit cards supported")
    @security_risk("PCI compliance required", severity="HIGH")
    def process_payment(payment_info):
        # Implementation
    
    @intent("Generate PDF report of transaction history")
    @implementation_status(NOT_IMPLEMENTED)
    def generate_report(transactions):
        raise NotImplementedError("Planned for v2.1")
    
    @intent("Classify transaction as fraudulent or legitimate")
    @implementation_status(REQUIRES_JUDGMENT, 
                          details="Regulatory compliance rules")
    def classify_transaction(transaction):
        # Implementation requiring human judgment
    
    @intent("Calculate shipping costs based on weight and destination")
    @implementation_status(AUTOMATION_READY, 
                          constraints=["Must handle international addresses",
                                      "Must account for dimensional weight"])
    def calculate_shipping(package, destination):
        # Implementation that could be generated by AI
    """
    pass  # This is just an example function

def example_context_managers():
    """
    Context manager annotation examples:
    
    def process_user_data(data):
        # Regular processing
        clean_data = sanitize(data)
        
        # Security-critical section
        with security_risk("SQL injection vulnerability"):
            query = build_query(clean_data['search'])
            results = execute_query(query)
        
        # Section requiring human judgment
        with implementation_status(REQUIRES_JUDGMENT):
            diagnostic_code = classify_health_data(clean_data)
            
        # Section suitable for AI implementation
        with implementation_status(AUTOMATION_READY):
            report = format_results(results, diagnostic_code)
            
        return report
    """
    pass  # This is just an example function

def annotation_best_practices():
    """
    ANNOTATION BEST PRACTICES:
    
    1. Status Accuracy
       - Always mark actual implementation status
       - Validate status using test integration
       - Update status when implementation changes
    
    2. Security Focus
       - Mark all security-sensitive code with @security_risk
       - Use informative descriptions and appropriate severity
       - Ensure security-critical code has tests
    
    3. Granular Annotations
       - Use function decorators for overall status
       - Use context managers for specific sections
       - Don't over-annotate (3-4 annotations per function maximum)
    
    4. Clear Boundaries
       - Use REQUIRES_JUDGMENT for areas needing human expertise
       - Use AUTOMATION_READY for well-specified AI-implementable sections
       - Use human_decision for specific decision points
    
    5. Intent Documentation
       - Keep intent descriptions focused on purpose, not implementation
       - Avoid implementation details in intent descriptions
       - Make intent descriptions actionable
    """
    pass  # This is just an example function

def annotation_checklist():
    """
    ANNOTATION CHECKLIST:
    
    Before committing code, verify:
    
    ✓ All public functions have implementation status
    ✓ Security-sensitive code is marked with security_risk
    ✓ Critical invariants are explicitly documented
    ✓ Human judgment boundaries are clearly marked
    ✓ No implementation status is out of date
    ✓ Test coverage validates implementation claims
    ✓ No excessive annotations (less is more)
    """
    pass  # This is just an example function
